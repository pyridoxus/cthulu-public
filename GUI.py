'''
Created on Nov 27, 2012

@author: cmcculloch
'''
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Nov 27 10:31:51 2012

#pylint: disable-msg=R0902,R0915,R0914,R0904

import wx #@UnusedImport
import wx.calendar
import wx.grid
# begin wxGlade: extracode
# end wxGlade

from math import sqrt
from TreeData import TreeData
from Bundle import Bundle
from CustomEvents import (EVT_RESULT, EVT_STOP, EVT_STOP_ID, EVT_TIMER,
                          EVT_PROGRESS, EVT_CLOCK, EVT_DATABASE_NOTIFY,
                          EVT_NETWORK_NOTIFY, EVT_END_STEP)
from TestBuilder import TestBuilder
from TimerThread import TimerThread
from ClockThread import ClockThread
from NotifyThread import NotifyThread

from time import sleep

import socket

# Resource path
hostname = socket.gethostname()

class MainFrame(wx.Frame):
    '''
    Main and only frame for the CTHULU Lua Armada Production test
    '''
   
    def __init__(self, *args, **kwds):
        '''
        Set up the GUI
        '''
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.__R = "/tmp/cthulu"    # Resource directory
        self.dbEndDateSizer_staticbox = wx.StaticBox(self, -1, "End Date")
        self.dbSizer_staticbox = wx.StaticBox(self, -1,
                                "Certifications and Test Data version 0.01")
        self.testSizer_staticbox = wx.StaticBox(self, -1,
                                "CTHULU Master Control Program version 0.01")
        self.testSuiteTreeSizer_staticbox = wx.StaticBox(self, -1, "Test Suite")
        self.outputSizer_staticbox = wx.StaticBox(self, -1, "Output Messages")
        self.dbStartDateSizer_staticbox = wx.StaticBox(self, -1, "Start Date")
        self.buttonExit = wx.BitmapButton(self, -1,
                                          wx.Bitmap("%sexit.xpm" % self.__R,
                                                    wx.BITMAP_TYPE_ANY),
                                          style=wx.NO_BORDER)
        self.buttonRestart = wx.BitmapButton(self, -1,
                                             wx.Bitmap("%sreload.xpm" % self.__R,
                                                       wx.BITMAP_TYPE_ANY),
                                             style=wx.NO_BORDER)
        self.buttonAdministration = wx.BitmapButton(self, -1,
                                            wx.Bitmap("%sagent.xpm" % self.__R,
                                                      wx.BITMAP_TYPE_ANY),
                                                    style=wx.NO_BORDER)
        self.buttonViewLogs = wx.BitmapButton(self, -1,
                                              wx.Bitmap("%sdocument.xpm" % \
                                                        self.__R,
                                                        wx.BITMAP_TYPE_ANY),
                                              style=wx.NO_BORDER)
        self.buttonGenerateSysReport = wx.BitmapButton(self, -1,
                                            wx.Bitmap("%smisc_doc.xpm" % \
                                                        self.__R,
                                                        wx.BITMAP_TYPE_ANY),
                                                       style=wx.NO_BORDER)
        self.buttonBugReport = wx.BitmapButton(self, -1,
                                               wx.Bitmap("%sbug.xpm" % self.__R,
                                                         wx.BITMAP_TYPE_ANY),
                                               style=wx.NO_BORDER)
        self.buttonHelp = wx.BitmapButton(self, 43,
                                          wx.Bitmap("%shelp.xpm" % self.__R,
                                                    wx.BITMAP_TYPE_ANY),
                                          style=wx.NO_BORDER)
        self.bitmapDataBase = wx.StaticBitmap(self, -1,
                                              wx.Bitmap("%sdatabase.xpm" % \
                                                        self.__R,
                                                        wx.BITMAP_TYPE_ANY))
        self.bitmapNetwork = wx.StaticBitmap(self, -1,
                                    wx.Bitmap("%sconnect_established.xpm" % \
                                              self.__R,
                                              wx.BITMAP_TYPE_ANY))
        self.labelDate = wx.StaticText(self, -1, "Wed Nov 21")
        self.labelTime = wx.StaticText(self, -1, "11:48 AM")
        self.checkboxDate = wx.CheckBox(self, 45, "Select date")
        self.checkboxDateRange = wx.CheckBox(self, -1, "Select date range")
        self.labelDBServer = wx.StaticText(self, -1, "DB Server:",
                                           style=wx.ALIGN_RIGHT)
        self.comboDBServer = wx.ComboBox(self, -1, choices=[],
                                         style=wx.CB_DROPDOWN| \
                                         wx.CB_DROPDOWN|wx.CB_READONLY| \
                                         wx.CB_SORT)
        self.labelProductType = wx.StaticText(self, -1, "Product Type:",
                                              style=wx.ALIGN_RIGHT)
        self.comboProductType = wx.ComboBox(self, -1, choices=[],
                                            style=wx.CB_DROPDOWN| \
                                            wx.CB_DROPDOWN|wx.CB_READONLY| \
                                            wx.CB_SORT)
        self.labelSerialNumber = wx.StaticText(self, -1, "Serial Number:",
                                               style=wx.ALIGN_RIGHT)
        self.textSerialNumber = wx.TextCtrl(self, -1, "")
        self.labelCustomerSN = wx.StaticText(self, -1, "Customer S/N:")
        self.textCustomerSN = wx.TextCtrl(self, -1, "")
        self.labelTestType = wx.StaticText(self, -1, "Test Type:")
        self.comboTestType = wx.ComboBox(self, -1, choices=[],
                                         style=wx.CB_DROPDOWN)
        self.labelTestStation = wx.StaticText(self, -1, "Test Station:")
        self.comboTestStation = wx.ComboBox(self, -1, choices=[],
                                            style=wx.CB_DROPDOWN)
        self.labelOperator = wx.StaticText(self, -1, "Operator:")
        self.comboOperator = wx.ComboBox(self, -1, choices=[],
                                         style=wx.CB_DROPDOWN)
        self.calendarStartDate = wx.calendar.CalendarCtrl(self, -1)
        self.calendarEndDate = wx.calendar.CalendarCtrl(self, -1)
        self.checkboxPassedTests = wx.CheckBox(self, -1,
                                               "Only return PASSED tests")
        self.buttonQuery = wx.BitmapButton(self, -1,
                                    wx.Bitmap("%sagt_action_success.xpm" % \
                                                self.__R,
                                                wx.BITMAP_TYPE_ANY),
                                           style=wx.NO_BORDER)
        self.buttonDBResetGUI = wx.BitmapButton(self, -1,
                                       wx.Bitmap("%scnrdelete-all.xpm" % \
                                                 self.__R,
                                                 wx.BITMAP_TYPE_ANY),
                                                style=wx.NO_BORDER)
        self.gridResults = wx.grid.Grid(self, -1, size=(1, 1))
        self.checkboxISO17025 = wx.CheckBox(self, -1,
                                            "ISO17025 Compliant Certs")
        self.buttonCreateCerts = wx.BitmapButton(self, -1,
                                                wx.Bitmap("%smisc.xpm" % \
                                                          self.__R,
                                                          wx.BITMAP_TYPE_ANY),
                                                 style=wx.NO_BORDER)
        self.buttonPreview = wx.BitmapButton(self, -1,
                                             wx.Bitmap("%sfilefind.xpm" % \
                                                       self.__R,
                                                       wx.BITMAP_TYPE_ANY),
                                             style=wx.NO_BORDER)
        self.buttonSlideDB = wx.BitmapButton(self, -1,
                                             wx.Bitmap("%s2leftarrow.xpm" % \
                                                       self.__R,
                                                       wx.BITMAP_TYPE_ANY),
                                             style=wx.NO_BORDER)
        self.buttonSlideTest = wx.BitmapButton(self, 37,
                                               wx.Bitmap("%s2rightarrow.xpm" % \
                                                         self.__R,
                                                         wx.BITMAP_TYPE_ANY),
                                               style=wx.NO_BORDER)
        self.labelTestSuite = wx.StaticText(self, -1, "Test Suite:")
        self.comboTestSuite = wx.ComboBox(self, -1,
                                          choices=[], style=wx.CB_DROPDOWN)
        self.labelBreakPoints = wx.StaticText(self, -1, "Break Points:")
        self.comboBreakPoints = wx.ComboBox(self, -1,
                                            choices=[], style=wx.CB_DROPDOWN)
        self.labelSkippedTests = wx.StaticText(self, -1, "Skipped Tests:")
        self.comboSkippedTests = wx.ComboBox(self, -1,
                                             choices=[], style=wx.CB_DROPDOWN)
        self.gaugeTest = wx.Gauge(self, -1, 1000)
        self.labelTestTime = wx.StaticText(self, -1, "0:00")
        self.buttonTestStart = wx.BitmapButton(self, -1,
                                            wx.Bitmap("%sagt_forward.xpm" % \
                                                      self.__R,
                                                      wx.BITMAP_TYPE_ANY),
                                               style=wx.NO_BORDER)
        self.buttonTestPause = wx.BitmapButton(self, -1,
                                    wx.Bitmap("%sagt_pause-queue.xpm" % \
                                                self.__R,
                                                wx.BITMAP_TYPE_ANY),
                                                style=wx.NO_BORDER)
        self.buttonTestStep = wx.BitmapButton(self, -1,
                                            wx.Bitmap("%sagt_aisles.xpm" % \
                                                      self.__R,
                                                      wx.BITMAP_TYPE_ANY),
                                              style=wx.NO_BORDER)
        self.buttonTestRepeat = wx.BitmapButton(self, -1,
                                                wx.Bitmap("%sreload.xpm" % \
                                                          self.__R,
                                                          wx.BITMAP_TYPE_ANY),
                                                style=wx.NO_BORDER)
        self.labelSlider = wx.StaticText(self, -1, "0ms")
        self.sliderRepeatSpeed = wx.Slider(self, -1, 0, 0, 100,
                                           style=wx.SL_HORIZONTAL)
        self.buttonTestStop = wx.BitmapButton(self, -1,
                                              wx.Bitmap("%sagt_stop.xpm" % \
                                                        self.__R,
                                                        wx.BITMAP_TYPE_ANY),
                                              style=wx.NO_BORDER)
        self.treeTest = wx.TreeCtrl(self, 35, style=wx.TR_HAS_BUTTONS| \
                                    wx.TR_LINES_AT_ROOT|wx.TR_MULTIPLE| \
                                    wx.TR_FULL_ROW_HIGHLIGHT|wx.TR_MULTIPLE| \
                                    wx.TR_DEFAULT_STYLE|wx.SUNKEN_BORDER)
        self.labelParametersCode = wx.StaticText(self, -1,
                                                 "Test Parameter Code")
        self.textParametersCode = wx.TextCtrl(self, 44, "",
                                             style=wx.TE_MULTILINE|wx.HSCROLL)
        self.labelModuleCode = wx.StaticText(self, -1, "Test Module Code")
        self.textModuleCode = wx.TextCtrl(self, 34, "",
                                          style=wx.TE_MULTILINE|wx.HSCROLL)
        self.labelValidatorCode = wx.StaticText(self, -1, "Test Validator Code")
        self.textValidatorCode = wx.TextCtrl(self, 38, "",
                                             style=wx.TE_MULTILINE|wx.HSCROLL)
        self.labelLimitsCode = wx.StaticText(self, -1, "Test Limits Code")
        self.textLimitsCode = wx.TextCtrl(self, 39, "",
                                          style=wx.TE_MULTILINE|wx.HSCROLL)
        self.buttonCodeEmail = wx.BitmapButton(self, 40,
                                               wx.Bitmap("%smail_send.xpm" % \
                                                         self.__R,
                                                         wx.BITMAP_TYPE_ANY),
                                               style=wx.NO_BORDER)
        self.buttonCodeSave = wx.BitmapButton(self, 41,
                                              wx.Bitmap("%sfilesave.xpm" % \
                                                        self.__R,
                                                        wx.BITMAP_TYPE_ANY),
                                              style=wx.NO_BORDER)
        self.buttonCodeDone = wx.BitmapButton(self, 42,
                                        wx.Bitmap("%sagt_action_success.xpm" % \
                                                  self.__R,
                                                  wx.BITMAP_TYPE_ANY),
                                              style=wx.NO_BORDER)
        self.textOutput = wx.TextCtrl(self, -1, "",
                                      style=wx.TE_READONLY|wx.NO_BORDER| \
                                      wx.TE_MULTILINE)
        self.__appSizer = None   # Will be set when doing layout
        self.__treeSizer = None   # Will be set when doing layout
        
        self.__testBuilder = TestBuilder()
        self.__bundle = Bundle(self.textOutput, self)
        self.__timerThread = None
        self.__clockThread = ClockThread(self)
        self.__clockThread.start()
        self.__notifyThread = NotifyThread(self)
        self.__notifyThread.start()
        self.__bundle.setNotificationThread(self.__notifyThread)
        
        self.__showCodeState = False
        
        self.__fixedFont = wx.Font(10, wx.FONTFAMILY_TELETYPE,
                                   wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
        self.__set_properties()
        self.__do_layout()
        
        self.__testState = "STOP"
        self.__resetDBState()
        self.__resetTestState()
        self.__repeatSpeed = 0
        self.__toggleDemo = False
        self.__setUpFakeTree()
        self.__showCodePanel()

        self.Bind(wx.EVT_BUTTON, self.eventExit, self.buttonExit)
        self.Bind(wx.EVT_BUTTON, self.eventRestart, self.buttonRestart)
        self.Bind(wx.EVT_BUTTON, self.eventAdministration,
                  self.buttonAdministration)
        self.Bind(wx.EVT_BUTTON, self.eventViewLogs,
                  self.buttonViewLogs)
        self.Bind(wx.EVT_BUTTON, self.eventGenerateSysReport,
                  self.buttonGenerateSysReport)
        self.Bind(wx.EVT_BUTTON, self.eventGenerateBugReport,
                  self.buttonBugReport)
        self.Bind(wx.EVT_BUTTON, self.eventHelp, id=43)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckBoxDateRange,
                  self.checkboxDateRange)
        self.Bind(wx.EVT_CHECKBOX, self.eventCheckBoxDate,
                  self.checkboxDate)
        self.Bind(wx.EVT_BUTTON, self.eventQuery, self.buttonQuery)
        self.Bind(wx.EVT_BUTTON, self.eventDBResetGUI, self.buttonDBResetGUI)
        self.Bind(wx.EVT_BUTTON, self.eventCreateCerts, self.buttonCreateCerts)
        self.Bind(wx.EVT_BUTTON, self.eventPreview, self.buttonPreview)
        self.Bind(wx.EVT_BUTTON, self.eventSlideDB, self.buttonSlideDB)
        self.Bind(wx.EVT_BUTTON, self.eventSlideTest, id=37)
        self.Bind(wx.EVT_COMBOBOX, self.eventComboTest, self.comboTestSuite)
        self.Bind(wx.EVT_COMBOBOX, self.eventComboBreak, self.comboBreakPoints)
        self.Bind(wx.EVT_COMBOBOX, self.eventComboSkipped,
                  self.comboSkippedTests)
        self.Bind(wx.EVT_BUTTON, self.eventStartTest, self.buttonTestStart)
        self.Bind(wx.EVT_BUTTON, self.eventPauseTest, self.buttonTestPause)
        self.Bind(wx.EVT_BUTTON, self.eventStepTests, self.buttonTestStep)
        self.Bind(wx.EVT_BUTTON, self.eventTestRepeat, self.buttonTestRepeat)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.eventRepeatSpeedScroll,
                  self.sliderRepeatSpeed)
        self.Bind(wx.EVT_BUTTON, self.eventStopTest, self.buttonTestStop)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.eventTreeTestItemActivated,
                  id=35)
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.eventTreeTestRightMouse,
                  id=35)
        self.Bind(wx.EVT_TEXT, self.eventParameterCodeChange, id=44)
        self.Bind(wx.EVT_TEXT, self.eventModuleCodeChange, id=34)
        self.Bind(wx.EVT_TEXT, self.eventValidatorCodeChange, id=38)
        self.Bind(wx.EVT_TEXT, self.eventLimitsCodeChange, id=39)
        self.Bind(wx.EVT_BUTTON, self.eventCodeEmailChanges, id=40)
        self.Bind(wx.EVT_BUTTON, self.eventCodeSaveLocal, id=41)
        self.Bind(wx.EVT_BUTTON, self.eventCodeDone, id=42)
        
        self.Bind(wx.EVT_CLOSE, self.__cleanExit)
        
        #Inter-thread communication events
        EVT_RESULT(self, self.__updateGUI)
        EVT_STOP(self, self.eventStopTest)
        EVT_TIMER(self, self.__updateTimer)
        EVT_PROGRESS(self, self.__incrementProgress)
        EVT_CLOCK(self, self.__updateClock)
        EVT_DATABASE_NOTIFY(self, self.__databaseNotify)
        EVT_NETWORK_NOTIFY(self, self.__networkNotify)
        EVT_END_STEP(self, self.__endStep)
        
        # end wxGlade

    def __set_properties(self):
        '''
        Set the properties of the GUI
        '''
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((1900, 1000))
        self.buttonExit.SetToolTipString("System Shutdown")
        self.buttonExit.SetSize(self.buttonExit.GetBestSize())
        self.buttonRestart.SetToolTipString("System Restart")
        self.buttonRestart.SetSize(self.buttonRestart.GetBestSize())
        self.buttonAdministration.SetToolTipString("System Administration")
        self.buttonAdministration.SetSize(
                                self.buttonAdministration.GetBestSize())
        self.buttonViewLogs.SetToolTipString("View Logs")
        self.buttonViewLogs.SetSize(self.buttonViewLogs.GetBestSize())
        self.buttonGenerateSysReport.SetToolTipString("Generate and email a "
                                                      "system error report "
                                                      "to HBM Champaign, IL")
        self.buttonGenerateSysReport.SetSize(
                                self.buttonGenerateSysReport.GetBestSize())
        self.buttonBugReport.SetToolTipString("Generate and email a Cthulu "
                                              "Bug Report to HBM Champaign, IL")
        self.buttonBugReport.SetSize(self.buttonBugReport.GetBestSize())
        self.buttonHelp.SetToolTipString("Help about operating the test system")
        self.buttonHelp.SetSize(self.buttonHelp.GetBestSize())
        self.bitmapDataBase.SetToolTipString("Connected to database")
        self.bitmapNetwork.SetToolTipString("Connected to network at W.X.Y.Z")
        self.labelTime.SetFont(wx.Font(16, wx.DEFAULT, wx.NORMAL, wx.NORMAL,
                                       0, "Sans"))
        self.checkboxDate.SetToolTipString("Select a date")
        self.checkboxDateRange.SetToolTipString("Select a date (unchecked) "
                                                "or date range (checked)")
        self.labelDBServer.SetMinSize((96, 17))
        self.comboDBServer.SetMinSize((260, 27))
        self.comboDBServer.SetToolTipString("Choose Database Server")
        self.labelProductType.SetMinSize((96, 17))
        self.comboProductType.SetMinSize((260, 27))
        self.labelSerialNumber.SetMinSize((96, 17))
        self.textSerialNumber.SetMinSize((260, 27))
        self.labelCustomerSN.SetMinSize((96, 17))
        self.textCustomerSN.SetMinSize((260, 27))
        self.labelTestType.SetMinSize((96, 17))
        self.comboTestType.SetMinSize((260, 27))
        self.labelTestStation.SetMinSize((96, 17))
        self.comboTestStation.SetMinSize((260, 27))
        self.labelOperator.SetMinSize((96, 17))
        self.comboOperator.SetMinSize((260, 27))
        self.buttonQuery.SetToolTipString("Run Query")
        self.buttonQuery.SetSize(self.buttonQuery.GetBestSize())
        self.buttonDBResetGUI.SetToolTipString("Reset Form")
        self.buttonDBResetGUI.SetSize(self.buttonDBResetGUI.GetBestSize())
        self.gridResults.CreateGrid(10, 8)
        self.gridResults.EnableEditing(0)
        self.gridResults.SetColLabelValue(0, "Product")
        self.gridResults.SetColSize(0, 100)
        self.gridResults.SetColLabelValue(1, "Serial Number")
        self.gridResults.SetColSize(1, 125)
        self.gridResults.SetColLabelValue(2, "Test Type")
        self.gridResults.SetColSize(2, 150)
        self.gridResults.SetColLabelValue(3, "Test Station")
        self.gridResults.SetColSize(3, 100)
        self.gridResults.SetColLabelValue(4, "Operator")
        self.gridResults.SetColSize(4, 100)
        self.gridResults.SetColLabelValue(5, "Date")
        self.gridResults.SetColSize(5, 150)
        self.gridResults.SetColLabelValue(6, "Test Status")
        self.gridResults.SetColSize(6, 100)
        self.gridResults.SetColLabelValue(7, "UUID")
        self.gridResults.SetColSize(7, 500)
        self.checkboxISO17025.SetToolTipString("Create ISO17025 "
                                               "compliant certificates")
        self.buttonCreateCerts.SetToolTipString("Create Certificates")
        self.buttonCreateCerts.SetSize(self.buttonCreateCerts.GetBestSize())
        self.buttonPreview.SetToolTipString("Preview the cert or data")
        self.buttonPreview.SetSize(self.buttonPreview.GetBestSize())
        self.buttonSlideDB.SetToolTipString("Hide Database Panel")
        self.buttonSlideDB.SetSize(self.buttonSlideDB.GetBestSize())
        self.buttonSlideTest.SetToolTipString("Hide Database Panel")
        self.buttonSlideTest.SetSize(self.buttonSlideTest.GetBestSize())
        self.labelTestSuite.SetMinSize((91, 17))
        self.comboTestSuite.SetMinSize((350, 27))
        self.comboTestSuite.SetToolTipString("Choose the desired test suite")
        self.labelBreakPoints.SetMinSize((91, 17))
        self.comboBreakPoints.SetMinSize((350, 27))
        self.comboBreakPoints.SetToolTipString("Select location of "
                                               "breakpoints in test")
        self.labelSkippedTests.SetMinSize((91, 17))
        self.comboSkippedTests.SetMinSize((350, 27))
        self.comboSkippedTests.SetToolTipString("Select the tests to skip. "
                                                "CAUTION! This will result "
                                                "in a test that cannot "
                                                "produce a cert")
        self.gaugeTest.SetMinSize((300, 28))
        self.gaugeTest.SetToolTipString("Test Progress")
        self.labelTestTime.SetFont(wx.Font(18, wx.DEFAULT, wx.NORMAL,
                                           wx.NORMAL, 0, "Sans"))
        self.labelTestTime.SetToolTipString("Test excecution time")
        self.buttonTestStart.SetToolTipString("Start selected test suite")
        self.buttonTestStart.SetSize(self.buttonTestStart.GetBestSize())
        self.buttonTestPause.SetToolTipString("Pause running test suite")
        self.buttonTestPause.SetSize(self.buttonTestPause.GetBestSize())
        self.buttonTestStep.SetToolTipString("Step through running test")
        self.buttonTestStep.SetSize(self.buttonTestStep.GetBestSize())
        self.buttonTestRepeat.SetToolTipString("Repeat current test module")
        self.buttonTestRepeat.SetSize(self.buttonTestRepeat.GetBestSize())
        self.sliderRepeatSpeed.SetMinSize((194, 20))
        self.sliderRepeatSpeed.SetToolTipString("Repeat speed. "
                                                "Set to zero to "
                                                "stop repeating.")
        self.buttonTestStop.SetToolTipString("Stop current test")
        self.buttonTestStop.SetSize(self.buttonTestStop.GetBestSize())
        self.textParametersCode.SetFont(self.__fixedFont)
        self.textModuleCode.SetFont(self.__fixedFont)
        self.textValidatorCode.SetFont(self.__fixedFont)
        self.textLimitsCode.SetFont(self.__fixedFont)
    # end wxGlade

    def __do_layout(self):
        '''
        Lay out all the GUI elements
        '''
        # begin wxGlade: MainFrame.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        self.__appSizer = wx.BoxSizer(wx.HORIZONTAL)
        testSizer = wx.StaticBoxSizer(self.testSizer_staticbox, wx.VERTICAL)
        outputSizer = wx.StaticBoxSizer(self.outputSizer_staticbox,
                                        wx.HORIZONTAL)
        self.__treeSizer = wx.StaticBoxSizer(
                            self.testSuiteTreeSizer_staticbox, wx.HORIZONTAL)
        sizerCodePanel = wx.BoxSizer(wx.VERTICAL)
        sizerCodeButtons = wx.BoxSizer(wx.HORIZONTAL)
        sizerCodeTop = wx.BoxSizer(wx.HORIZONTAL)
        sizerCodeBottom = wx.BoxSizer(wx.HORIZONTAL)
        sizerParametersCode = wx.BoxSizer(wx.VERTICAL)
        sizerLimitCode = wx.BoxSizer(wx.VERTICAL)
        sizerValidatorCode = wx.BoxSizer(wx.VERTICAL)
        sizerModuleCode = wx.BoxSizer(wx.VERTICAL)
        testMainControlSizer = wx.BoxSizer(wx.HORIZONTAL)
        testControl2Sizer = wx.BoxSizer(wx.VERTICAL)
        testControl2ASizer = wx.BoxSizer(wx.HORIZONTAL)
        sliderSizer = wx.BoxSizer(wx.VERTICAL)
        timingSizer = wx.BoxSizer(wx.HORIZONTAL)
        testControl1Sizer = wx.BoxSizer(wx.VERTICAL)
        skippedTestsSizer = wx.BoxSizer(wx.HORIZONTAL)
        breakPointsSizer = wx.BoxSizer(wx.HORIZONTAL)
        testSuiteSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbSlideSizer = wx.BoxSizer(wx.VERTICAL)
        dbSizer = wx.StaticBoxSizer(self.dbSizer_staticbox, wx.VERTICAL)
        dbActionSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbResultSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbCommandSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbSelectSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbEndDateSizer = wx.StaticBoxSizer(self.dbEndDateSizer_staticbox,
                                           wx.VERTICAL)
        dbStartDateSizer = wx.StaticBoxSizer(self.dbStartDateSizer_staticbox,
                                             wx.VERTICAL)
        dbCriteriaSizer = wx.BoxSizer(wx.VERTICAL)
        operatorSizer = wx.BoxSizer(wx.HORIZONTAL)
        testStationSizer = wx.BoxSizer(wx.HORIZONTAL)
        testTypeSizer = wx.BoxSizer(wx.HORIZONTAL)
        customerSNSizer = wx.BoxSizer(wx.HORIZONTAL)
        serialNumberSizer = wx.BoxSizer(wx.HORIZONTAL)
        productTypeSizer = wx.BoxSizer(wx.HORIZONTAL)
        selectDBSizer = wx.BoxSizer(wx.HORIZONTAL)
        dbTitleSizer = wx.BoxSizer(wx.HORIZONTAL)
        titleSizer = wx.BoxSizer(wx.HORIZONTAL)
        indicatorSizer = wx.BoxSizer(wx.HORIZONTAL)
        dateTimeSizer = wx.BoxSizer(wx.VERTICAL)
        functionSizer = wx.BoxSizer(wx.HORIZONTAL)
        functionSizer.Add(self.buttonExit, 0, 0, 0)
        functionSizer.Add(self.buttonRestart, 0, 0, 0)
        functionSizer.Add(self.buttonAdministration, 0, 0, 0)
        functionSizer.Add(self.buttonViewLogs, 0, 0, 0)
        functionSizer.Add(self.buttonGenerateSysReport, 0, 0, 0)
        functionSizer.Add(self.buttonBugReport, 0, 0, 0)
        functionSizer.Add(self.buttonHelp, 0, 0, 0)
        titleSizer.Add(functionSizer, 1, wx.EXPAND, 0)
        indicatorSizer.Add(self.bitmapDataBase, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        indicatorSizer.Add(self.bitmapNetwork, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        dateTimeSizer.Add(self.labelDate, 0, wx.ALIGN_RIGHT, 0)
        dateTimeSizer.Add(self.labelTime, 0, wx.ALIGN_RIGHT, 0)
        indicatorSizer.Add(dateTimeSizer, 0, 0, 0)
        titleSizer.Add(indicatorSizer, 0, wx.EXPAND, 0)
        mainSizer.Add(titleSizer, 0, wx.EXPAND, 0)
        dbTitleSizer.Add(self.checkboxDate, 0,
                         wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 150)
        dbTitleSizer.Add(self.checkboxDateRange, 0,
                         wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 75)
        dbSizer.Add(dbTitleSizer, 0, wx.ALIGN_RIGHT, 0)
        selectDBSizer.Add(self.labelDBServer, 0,
                          wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 0)
        selectDBSizer.Add(self.comboDBServer, 0, 0, 0)
        dbCriteriaSizer.Add(selectDBSizer, 0, wx.ALL|wx.EXPAND, 4)
        productTypeSizer.Add(self.labelProductType, 0,
                             wx.ALIGN_CENTER_VERTICAL, 0)
        productTypeSizer.Add(self.comboProductType, 0, 0, 0)
        dbCriteriaSizer.Add(productTypeSizer, 0, wx.ALL|wx.EXPAND, 4)
        serialNumberSizer.Add(self.labelSerialNumber, 0,
                              wx.ALIGN_CENTER_VERTICAL, 0)
        serialNumberSizer.Add(self.textSerialNumber, 0, wx.ALIGN_RIGHT, 0)
        dbCriteriaSizer.Add(serialNumberSizer, 0, wx.ALL|wx.EXPAND, 4)
        customerSNSizer.Add(self.labelCustomerSN, 0,
                            wx.ALIGN_CENTER_VERTICAL, 0)
        customerSNSizer.Add(self.textCustomerSN, 0, 0, 0)
        dbCriteriaSizer.Add(customerSNSizer, 0, wx.ALL|wx.EXPAND, 4)
        testTypeSizer.Add(self.labelTestType, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        testTypeSizer.Add(self.comboTestType, 0, 0, 0)
        dbCriteriaSizer.Add(testTypeSizer, 0, wx.ALL|wx.EXPAND, 4)
        testStationSizer.Add(self.labelTestStation, 0,
                             wx.ALIGN_CENTER_VERTICAL, 0)
        testStationSizer.Add(self.comboTestStation, 0, 0, 0)
        dbCriteriaSizer.Add(testStationSizer, 0, wx.ALL|wx.EXPAND, 4)
        operatorSizer.Add(self.labelOperator, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        operatorSizer.Add(self.comboOperator, 0, 0, 0)
        dbCriteriaSizer.Add(operatorSizer, 0, wx.ALL|wx.EXPAND, 4)
        dbSelectSizer.Add(dbCriteriaSizer, 0, wx.EXPAND, 0)
        dbStartDateSizer.Add(self.calendarStartDate, 0, 0, 0)
        dbSelectSizer.Add(dbStartDateSizer, 0, wx.ALL, 4)
        dbEndDateSizer.Add(self.calendarEndDate, 0, 0, 0)
        dbSelectSizer.Add(dbEndDateSizer, 0, wx.ALL, 4)
        dbSizer.Add(dbSelectSizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        dbCommandSizer.Add(self.checkboxPassedTests, 0,
                           wx.ALIGN_CENTER_VERTICAL, 0)
        dbCommandSizer.Add(self.buttonQuery, 0,
                           wx.ALL|wx.ALIGN_CENTER_HORIZONTAL| \
                           wx.ALIGN_CENTER_VERTICAL, 4)
        dbCommandSizer.Add(self.buttonDBResetGUI, 0,
                           wx.ALL|wx.ALIGN_CENTER_HORIZONTAL| \
                           wx.ALIGN_CENTER_VERTICAL, 4)
        dbSizer.Add(dbCommandSizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        dbResultSizer.Add(self.gridResults, 1, wx.EXPAND, 0)
        dbSizer.Add(dbResultSizer, 1, wx.EXPAND, 0)
        dbActionSizer.Add(self.checkboxISO17025, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        dbActionSizer.Add(self.buttonCreateCerts, 0, wx.ALL, 4)
        dbActionSizer.Add(self.buttonPreview, 0, wx.ALL, 4)
        dbSizer.Add(dbActionSizer, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.__appSizer.Add(dbSizer, 1, wx.EXPAND, 0)
        dbSlideSizer.Add((20, 20), 1, wx.EXPAND, 0)
        dbSlideSizer.Add(self.buttonSlideDB, 0,
                         wx.ALL|wx.ALIGN_CENTER_HORIZONTAL| \
                         wx.ALIGN_CENTER_VERTICAL, 4)
        dbSlideSizer.Add(self.buttonSlideTest, 0,
                         wx.ALL|wx.ALIGN_CENTER_HORIZONTAL| \
                         wx.ALIGN_CENTER_VERTICAL, 4)
        dbSlideSizer.Add((20, 20), 1, wx.EXPAND, 0)
        self.__appSizer.Add(dbSlideSizer, 0, wx.EXPAND, 0)
        testSuiteSizer.Add(self.labelTestSuite, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        testSuiteSizer.Add(self.comboTestSuite, 0, 0, 0)
        testControl1Sizer.Add(testSuiteSizer, 1, wx.ALL|wx.EXPAND, 4)
        breakPointsSizer.Add(self.labelBreakPoints, 0,
                             wx.ALIGN_CENTER_VERTICAL, 0)
        breakPointsSizer.Add(self.comboBreakPoints, 0, 0, 0)
        testControl1Sizer.Add(breakPointsSizer, 1, wx.ALL|wx.EXPAND, 4)
        skippedTestsSizer.Add(self.labelSkippedTests, 0,
                              wx.ALIGN_CENTER_VERTICAL, 0)
        skippedTestsSizer.Add(self.comboSkippedTests, 0, 0, 0)
        testControl1Sizer.Add(skippedTestsSizer, 1, wx.ALL|wx.EXPAND, 4)
        testMainControlSizer.Add(testControl1Sizer, 0, wx.EXPAND, 0)
        timingSizer.Add(self.gaugeTest, 3, wx.ALL|wx.EXPAND, 4)
        timingSizer.Add(self.labelTestTime, 1,
                        wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2Sizer.Add(timingSizer, 1, wx.EXPAND, 0)
        testControl2ASizer.Add(self.buttonTestStart, 0,
                               wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2ASizer.Add(self.buttonTestPause, 0,
                               wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2ASizer.Add(self.buttonTestStep, 0,
                               wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2ASizer.Add(self.buttonTestRepeat, 0,
                               wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        sliderSizer.Add(self.labelSlider, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sliderSizer.Add(self.sliderRepeatSpeed, 0,
                        wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2ASizer.Add(sliderSizer, 0, wx.EXPAND, 0)
        testControl2ASizer.Add(self.buttonTestStop, 0,
                               wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 4)
        testControl2Sizer.Add(testControl2ASizer, 1,
                              wx.ALIGN_RIGHT, 0)
        testMainControlSizer.Add(testControl2Sizer, 1, wx.EXPAND, 0)
        testSizer.Add(testMainControlSizer, 0, wx.EXPAND, 0)
        self.__treeSizer.Add(self.treeTest, 1, wx.EXPAND, 0)
        sizerParametersCode.Add(self.labelParametersCode, 0,
                               wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        sizerParametersCode.Add(self.textParametersCode, 1, wx.EXPAND, 0)
        sizerCodeTop.Add(sizerParametersCode, 1, wx.EXPAND, 0)
        sizerModuleCode.Add(self.labelModuleCode, 0,
                            wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        sizerModuleCode.Add(self.textModuleCode, 1, wx.EXPAND, 0)
        sizerCodeTop.Add(sizerModuleCode, 1, wx.EXPAND, 0)
        sizerCodePanel.Add(sizerCodeTop, 1, wx.EXPAND, 0)
        sizerValidatorCode.Add(self.labelValidatorCode, 0,
                               wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        sizerValidatorCode.Add(self.textValidatorCode, 1, wx.EXPAND, 0)
        sizerCodeBottom.Add(sizerValidatorCode, 1, wx.EXPAND, 0)
        sizerLimitCode.Add(self.labelLimitsCode, 0,
                           wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 2)
        sizerLimitCode.Add(self.textLimitsCode, 1, wx.EXPAND, 0)
        sizerCodeBottom.Add(sizerLimitCode, 1, wx.EXPAND, 0)
        sizerCodePanel.Add(sizerCodeBottom, 1, wx.EXPAND, 0)
        sizerCodeButtons.Add(self.buttonCodeEmail, 0, wx.ALL, 8)
        sizerCodeButtons.Add(self.buttonCodeSave, 0, wx.ALL, 8)
        sizerCodeButtons.Add(self.buttonCodeDone, 0, wx.ALL, 8) 
        sizerCodePanel.Add(sizerCodeButtons, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.__treeSizer.Add(sizerCodePanel, 1, wx.EXPAND, 0) 
        testSizer.Add(self.__treeSizer, 3, wx.EXPAND, 0)
        outputSizer.Add(self.textOutput, 1, wx.EXPAND, 0)
        testSizer.Add(outputSizer, 1, wx.EXPAND, 0)
        self.__appSizer.Add(testSizer, 1, wx.EXPAND, 0)
        mainSizer.Add(self.__appSizer, 1, wx.ALL|wx.EXPAND, 4)
        self.SetSizer(mainSizer)
        self.Layout()
        # end wxGlade
        
    
    def __resetDBState(self):
        '''
        Reset the state of the database GUI.
        '''
        self.checkboxDate.SetValue(False)
        self.checkboxDateRange.SetValue(False)
        self.checkboxDateRange.Enable(False)
        self.calendarStartDate.Enable(False)
        self.calendarEndDate.Enable(False)
        now = wx.DateTime()
        self.calendarStartDate.SetDate(now.Now())
        self.calendarEndDate.SetDate(now.Now())
        self.comboDBServer.SetValue("None")
        self.comboOperator.SetValue("None")
        self.comboProductType.SetValue("None")
        self.comboTestStation.SetValue("None")
        self.comboTestType.SetValue("None")
        self.textCustomerSN.SetValue("None")
        self.textSerialNumber.SetValue("None")
        self.checkboxISO17025.SetValue(False)
        self.checkboxPassedTests.SetValue(False)
        
        
    def __resetTestState(self):
        '''
        Reset the state of the test GUI.
        '''
        self.comboTestSuite.SetValue("None")
        self.comboBreakPoints.SetValue("None")
        self.comboSkippedTests.SetValue("None")
        self.gaugeTest.SetValue(0)
        self.labelTestTime.SetLabel("0:00")
        self.__testState = "STOP"
        self.__setTestButtons()
        
        
    def __setTestButtons(self):
        '''
        Set the test buttons according to the state of the test.
        '''
        if self.__testState == "STOP":
            self.buttonTestStart.Enable(True)
            self.buttonTestPause.Enable(False)
            self.buttonTestStep.Show(False)
            self.buttonTestRepeat.Show(False)
            self.labelSlider.Show(False)
            self.sliderRepeatSpeed.Show(False)
            self.buttonTestStop.Enable(False)       
        elif self.__testState == "RUN":
            self.buttonTestStart.Enable(False)
            self.buttonTestPause.Enable(True)
            self.buttonTestStep.Show(False)
            self.buttonTestRepeat.Show(False)
            self.labelSlider.Show(False)
            self.sliderRepeatSpeed.Show(False)
            self.buttonTestStop.Enable(True)
        elif self.__testState == "PAUSE":
            self.buttonTestStart.Enable(True)
            self.buttonTestPause.Enable(False)
            self.buttonTestStep.Show(True)
            self.buttonTestStep.Enable(True)
            self.buttonTestRepeat.Show(True)
            self.buttonTestRepeat.Enable(True)
            self.labelSlider.Show(True)
            self.labelSlider.SetLabel("%dms" % self.__repeatSpeed)
            self.sliderRepeatSpeed.Show(True)
            self.sliderRepeatSpeed.SetValue(sqrt(self.__repeatSpeed))
            self.buttonTestStop.Enable(True)
        elif "REPEAT" in self.__testState:  # Any form of repeat
            self.buttonTestStart.Enable(False)
            self.buttonTestPause.Enable(False)
            self.buttonTestStep.Show(True)
            self.buttonTestStep.Enable(False)
            self.buttonTestRepeat.Show(True)
            self.buttonTestRepeat.Enable(False)
            self.labelSlider.Show(True)
            self.labelSlider.SetLabel("%dms" % self.__repeatSpeed)
            self.sliderRepeatSpeed.Show(True)
            self.sliderRepeatSpeed.SetValue(sqrt(self.__repeatSpeed))
            self.buttonTestStop.Enable(True)
        elif self.__testState == "STEP":
            self.buttonTestStart.Enable(False)
            self.buttonTestPause.Enable(False)
            self.buttonTestStep.Enable(False)
            self.buttonTestRepeat.Enable(False)
            self.buttonTestStop.Enable(True)
        else:
            # Default to all buttons active so that something useful may happen
            # even though only a bug should cause this to happen.
            self.buttonTestPause.Enable(True)
            self.buttonTestStart.Enable(True)
            self.buttonTestStep.Show(True)
            self.buttonTestRepeat.Show(True)
            self.buttonTestRepeat.Enable(True)
            self.labelSlider.Show(True)
            self.sliderRepeatSpeed.Show(True)
            self.sliderRepeatSpeed.SetValue(0)
            self.buttonTestStop.Enable(True)
            
        self.Layout()
            

    def __setUpFakeTree(self):
        '''
        Put some fake data in the tree so we have something to demo.
        '''
        fakeTestCode = [ "def parameters(bundle):\n"
                         "\t# Parameters can be anything:\n"
                         "\t# .. boolean, upper-lower pair in a tuple,\n"
                         "\t# .. strings, date-time range, amps\n"
                         "\t# .. voltage, resistance, etc.\n"
                         "\n"
                         "\treturn { \"input\" : 4, \"units\" : \"Volts\" "
                         "}  # Parameters returned to module\n",
                            #returns to the validator code
                            
                         "from time import sleep\n"
                         "\n"
                         "def module(bundle):\n"
                         "\t# Very simple scripts to illustrate how a test\n"
                         "\t# will be used in the production version. The\n"
                         "\t# bundle parameter contains everything the test\n"
                         "\t# module will need:\n"
                         "\t# .. access to the output panel in the GUI\n"
                         "\t# .. database access\n"
                         "\t# .. module stores UUT response in bundle\n"
                         "\t# .. validator tests UUT response from bundle\n"
                         "\t# .. validator gets limit function from bundle\n"
                         "\t# .. access to the test equipment\n"
                         "\t# .. access the UUT\n"
                         "\t# .. module, validator, limits intercommunication\n"
                         "\t# .. access to results of previous tests\n"
                         "\t# .. many more features added as needed\n"
                         "\n"
                         "\tbundle.output(\"Running test: %s\" % testName)\n"
                         "\tbundle.output(\"Bundle: %s\" % bundle)\n"
                         "#\tprint \"parameters\", bundle.parameters\n"
                         "#\tprint \"module\", bundle.module\n"
                         "#\tprint \"validate\", bundle.validate\n"
                         "#\tprint \"limits\", bundle.limits\n"
                         "#\tprint \"output\", bundle.output\n"
                         "\tparameters = bundle.parameters(bundle)\n"
                         "\t# Parameters just as example.\n"
                         "\tbundle.output(\"Parameters: %s\" % parameters)\n\n"
                         "\t# Pretend to setup a voltage input...\n"
                         "\t# bundle.dcSource.setVoltage(parameters["
                         "\"input\"])\n\n"
                         "\tbundle.testResponse = 2.3  #fake response "
                         "from UUT\n\n"
                         "\tbundle.testResult = bundle.validate(bundle) # test "
                         "against limits and save result\n"
                         "\tsleep(1)  # Just for demo purposes\n"
                         "\tbundle.incrementProgress()"
                         "# Eventually, the results are put in the database\n"
                         "# and the test engine loads another test into the\n"
                         "# bundle to be executed\n" # returns to the bundle
                         "\tbundle.DBNotify()\n"
                         "\tsleep(1)\n"
                         ,

                         "def validate(bundle):\n"
                         "\t# Validate the UUT response in any number of ways\n"
                         "\t# But doing something simple for demo\n"
                         "\n"
                         "\tlowerLimit = bundle.limits(bundle)[\"criteria\"]"
                         "[0]\n"
                         "\tupperLimit = bundle.limits(bundle)[\"criteria\"]"
                         "[1]\n"
                         "\n"
                         "\t# The next line defines the human-readble \n"
                         "\t# version of the limits found in print outs,\n"
                         "\t# certs, and datasheets.\n"
                         "\tbundle.testLimits = \"%.6f < %.6f < %.6f (%s)\""
                         " % \\\n\t\t(lowerLimit, bundle.testResponse, "
                         "upperLimit, bundle.parameters(bundle)[\"units\"])\n"
                         "\n"
                         "\tresult = bundle.testResponse > lowerLimit and "
                         "bundle.testResponse < upperLimit\n"
                         "\treturn result  # "
                         "Results of validation to module code\n",
                         # returns to the module code
                         
                         "def limits(bundle):\n"
                         "\t# Limits can return anything:\n"
                         "\t# .. boolean, upper-lower pair in a tuple,\n"
                         "\t# .. strings, date-time range, etc.\n"
                         "\n"
                         "\treturn { \"criteria\" : [-5, 5] ,"
                         " \"units\" : \"Volts\" }  # Result return "
                         "to validator\n"
                            #returns to the validator code
                         ]
        
        print "Fake test code:"
        print fakeTestCode[0]
        print fakeTestCode[1]
        print fakeTestCode[2]
        print fakeTestCode[3]
        tempID0 = self.treeTest.AddRoot("TestSuite")
        fullName = self.__treeBranchFormPath(tempID0)
        self.treeTest.SetItemFont(tempID0, self.__fixedFont)
        self.treeTest.SetPyData(tempID0, TreeData(fullName,
                                                  "", "", "", "", False, False))
        progressRange = 0
        for j in range(5):
            tempID1 = self.treeTest.AppendItem(tempID0, "TestBlock%s" % j)
            fullName = self.__treeBranchFormPath(tempID1)
            self.treeTest.SetItemFont(tempID1, self.__fixedFont)
            self.treeTest.SetPyData(tempID1,
                                    TreeData(fullName,
                                             "", "", "", "", False, False))
            for i in range(10):
                tempID2 = self.treeTest.AppendItem(tempID1,
                                                   "TestModule%d" % \
                                                  (i + 1))
                fullName = self.__treeBranchFormPath(tempID2)
                self.treeTest.SetItemFont(tempID2, self.__fixedFont)
                self.treeTest.SetPyData(tempID2,
                                        TreeData(fullName,
                                                 fakeTestCode[0],
                                                 "testName = \"%s\"\n%s" % \
                                                 (fullName, fakeTestCode[1]),
                                                 fakeTestCode[2],
                                                 fakeTestCode[3],
                                                 False, False))
                # In reality, the number of steps will be retrieved from 
                # the database because it may be possible for some test
                # modules to be very long and will need to notify the user
                # that the test is still running.
                # For demo purposes, we will just increment a counter
                # and then set the progress bar range.
                progressRange += 1
        self.gaugeTest.SetRange(progressRange)

        
    def __showCodePanel(self):
        '''
        Show code / hide tree if True, else hide code / show tree
        '''
        # 0 indexes tree sizer
        self.__treeSizer.Show(0, not self.__showCodeState, True)
        # 1 indexes code sizer
        self.__treeSizer.Show(1, self.__showCodeState, True)
        self.GetSizer().Layout()
        
        
    def getRepeatSpeed(self):
        '''
        Return the current repeat speed in milliseconds
        '''
        return self.__repeatSpeed
    
        
    def eventExit(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        User is trying to exit
        '''
        msgDlg = wx.MessageDialog(self, "Are you sure you want to shutdown?",
                                        "Shut Down", wx.YES_NO | wx.NO_DEFAULT)
        if msgDlg.ShowModal() == wx.ID_YES:
            self.Destroy()
        else:
            if not self.__toggleDemo:
                self.__toggleDemo = True
                self.bitmapDataBase.SetBitmap(wx.Bitmap("%sdb_status.xpm" % \
                                                        self.__R))
                self.bitmapNetwork.SetBitmap(wx.Bitmap("%sconnect_no.xpm" % \
                                                       self.__R))
            else:
                self.__toggleDemo = False
                self.bitmapDataBase.SetBitmap(wx.Bitmap("%sdatabase.xpm" % \
                                                        self.__R))
                self.bitmapNetwork.SetBitmap(wx.Bitmap("%s"
                                            "connect_established.xpm" % \
                                            self.__R))
        event.Skip()

    def eventRestart(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        User is trying to restart
        '''
        msgDlg = wx.MessageDialog(self, "Are you sure you want to restart?",
                                        "Restart", wx.YES_NO | wx.NO_DEFAULT)
        if msgDlg.ShowModal() == wx.ID_YES:
            self.Destroy()  # Will normally shutdown -r now in a script
        event.Skip()

    def eventAdministration(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        User is trying to perform administrative tasks
        '''
        self.textOutput.AppendText("Administration pop-up dialog "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "Administration stuff happens in here.",
                                        "Administration",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventViewLogs(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        User is trying to view the logs pertaining to the test system
        '''
        self.textOutput.AppendText("Log pop-up dialog "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "View logs happens in here.", "Logs",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventGenerateSysReport(self, event): # wxGlade:MainFrame.<event_handler>
        '''
        User is trying to generate a system report to be sent to HBM
        '''
        self.textOutput.AppendText("Generate System Report pop-up dialog "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "Generating a system report"
                                        "happens in here.", "System Report",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventGenerateBugReport(self, event): # wxGlade:MainFrame.<event_handler>
        '''
        User is trying to generate a software bug report to be sent to HBM
        '''
        self.textOutput.AppendText("Generate Bug Report pop-up dialog "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "Generating a bug report"
                                        "happens in here.", "Bug Report",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventCheckBoxDateRange(self, event): # wxGlade:MainFrame.<event_handler>
        '''
        User checked the date range box. This toggles the end calendar enable.
        '''
        # This if-else structure may need other things to happen in the future,
        # which is why I'm not just setting the enable with the value....
        if self.checkboxDateRange.GetValue() == True:
            self.calendarEndDate.Enable(True)
        else:
            self.calendarEndDate.Enable(False)
        self.textOutput.AppendText("User touched the Date Range check box.\n")
        event.Skip()
        
        
    def eventCheckBoxDate(self, event):
        '''
        User checked the date box. This toggles the main calendar enable
        and the date range checkbox.
        '''
        if self.checkboxDate.GetValue() == True:
            self.calendarStartDate.Enable(True)
            self.checkboxDateRange.Enable(True)
            self.calendarEndDate.Enable(self.checkboxDateRange.GetValue())
        else:
            self.calendarEndDate.Enable(False)
            self.calendarStartDate.Enable(False)
            self.checkboxDateRange.Enable(False)
        self.textOutput.AppendText("User touched the Date check box.\n")
        event.Skip()

    def eventQuery(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user is querying the database for test results.
        '''
        self.textOutput.AppendText("User touched the Query Button.\n")
        msgDlg = wx.MessageDialog(self, "Querying database happens in here.",
                                        "Querying", wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventDBResetGUI(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to reset the GUI elements in the database panel.
        '''
        self.__resetDBState()
        self.textOutput.AppendText("User reset the DB GUI panel.\n")
        event.Skip()

    def eventCreateCerts(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to create certs
        '''
        self.textOutput.AppendText("User touched the Create Certs button.\n")
        msgDlg = wx.MessageDialog(self, "Generating a cert happens in here.",
                                        "Generate Cert",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventPreview(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to preview the test results
        '''
        self.textOutput.AppendText("User touched the Preview Button.\n")
        msgDlg = wx.MessageDialog(self, "Generating a preview happens in here.",
                                        "Generate Preview",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventSlideDB(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to collapse or expand the database panel.
        '''
        if self.__appSizer.IsShown(0) == True:
            self.__appSizer.Show(0, False, True)    # 0 indexes the dbSizer
                                                    # False = hide
                                                    # True = recursive
            self.buttonSlideDB.SetBitmapLabel(wx.Bitmap("%s2rightarrow.xpm" % \
                                                        self.__R))
            self.buttonSlideTest.Show(False)        # Don't show other button
            self.buttonSlideDB.SetToolTipString("Show Database Panel")
            self.textOutput.AppendText("Hiding DB GUI panel.\n")
        else:
            self.__appSizer.Show(0, True, True)     # 0 indexes the dbSizer
                                                    # True = show
                                                    # True = recursive
            self.buttonSlideDB.SetBitmapLabel(wx.Bitmap("%s2leftarrow.xpm" % \
                                                        self.__R))
            self.buttonSlideTest.Show(True)        # Show other button
            self.buttonSlideDB.SetToolTipString("Hide Database Panel")
            self.textOutput.AppendText("Showing DB GUI panel.\n")
        self.GetSizer().Layout()
        event.Skip()

    def eventSlideTest(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to collapse or expand the test panel.
        '''
        if self.__appSizer.IsShown(2) == True:
            self.__appSizer.Show(2, False, True)    # 2 indexes the test sizer
                                                    # False = hide
                                                    # True = recursive
            self.buttonSlideTest.SetBitmapLabel(
                                wx.Bitmap("%s2leftarrow.xpm" % self.__R))
            self.buttonSlideDB.Show(False)        # Don't show other button
            self.buttonSlideTest.SetToolTipString("Show Test Panel")
            self.textOutput.AppendText("Hiding Test GUI panel.\n")
        else:
            self.__appSizer.Show(2, True, True)     # 2 indexes the test sizer
                                                    # True = show
                                                    # True = recursive
            self.buttonSlideTest.SetBitmapLabel(
                                wx.Bitmap("%s2rightarrow.xpm" % self.__R))
            self.buttonSlideDB.Show(True)        # Don't show other button
            self.buttonSlideTest.SetToolTipString("Hide Test Panel")
            self.__showCodePanel()  # Put code/tree back to previous state
            self.__setTestButtons() # Put test buttons back to previous state
            self.textOutput.AppendText("Showing DB GUI panel.\n")
        self.GetSizer().Layout()
        event.Skip()

    def __busyInfoMessage(self, msg, busyText):
        '''
        Send msg to test thread and display a BusyInfo window containing
        busytext. This will also pause the GUI message loop until the test
        thread has received the message."
        '''
        busyInfo = wx.BusyInfo(busyText)
        wx.Yield()
        # Send message to test thread and wait for it to get message
        self.__bundle.setMessage(msg, True)
        busyInfo.Destroy()
        
        
    def eventStartTest(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to start the selected test.
        '''
        self.__testState = "RUN"
        self.__setTestButtons()
        self.textOutput.AppendText("Starting or continuing a test suite.\n")
        if not self.__bundle.isTestRunning():
            root = self.treeTest.GetRootItem()
            self.__recursiveApply(root, self.__testBuilder.build,
                                  { "bundle" : self.__bundle,
                                    "tree" : self.treeTest })
            if self.__timerThread is not None:
                self.__timerThread.setMessage("STOP")
                self.__timerThread = None
            self.__timerThread = TimerThread(self)
            self.__timerThread.start()
            self.__bundle.start()
        else:
            self.__busyInfoMessage("RUN", "Continuing test.\nPlease wait...")
        event.Skip()

    def eventPauseTest(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to pause the test
        '''
        self.__busyInfoMessage("PAUSE", "Pausing after currently executing "
                               "test.\nPlease wait...")
        self.__testState = "PAUSE"
        self.__setTestButtons()
        self.textOutput.AppendText("Test suite paused.\n")
        event.Skip()

    def eventStepTests(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user is stepping through the test modules.
        '''
        self.__testState = "STEP"
        self.__setTestButtons()
        self.textOutput.AppendText("Stepping through test suite.\n")
        self.__bundle.setMessage("STEP", True)
        event.Skip()

    def eventStopTest(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        The user wants to stop the test... are they sure?
        Or, the test stopped normally.
        '''
        def common():
            '''Common code depending on type of event.'''
            self.__testState = "STOP"
            self.__setTestButtons()
            self.textOutput.AppendText("Test suite stopped.\n")
            if self.__timerThread is not None:
                self.__timerThread.setMessage("STOP")
                self.__timerThread = None
            self.gaugeTest.SetValue(0)
            
        if event.EventType == EVT_STOP_ID: # This comes from the test thread
            self.textOutput.AppendText(event.data)
            common()
        else:
            msgDlg = wx.MessageDialog(self, "Are you sure you wish "
                                            "to stop the test?.",
                                            "Stopping Test",
                                            wx.YES_NO | wx.NO_DEFAULT)
            if msgDlg.ShowModal() == wx.ID_YES:
                self.__busyInfoMessage("STOP", "Stopping after currently "
                                       "executing test.\nPlease wait...")
                common()
            else:
                self.textOutput.AppendText("Test suite still running.\n")
            event.Skip()


    def eventTestRepeat(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        User wants to repeat the current test module.
        '''
        if self.sliderRepeatSpeed.GetValue() == 0:
            self.textOutput.AppendText("Repeating the current test once.\n")
            self.__testState = "REPEAT_ONCE"
            msgDlg = wx.MessageDialog(self, "Repeating the current test "
                                      "module happens here.",
                                            "Repeat Test Module",
                                            wx.YES_NO | wx.NO_DEFAULT)
            msgDlg.ShowModal()
            msgDlg.Destroy()
            # In reality, the test thread gets this string and repeats the
            # current test once. Afterwards, the test thread puts it back to
            # PAUSE, so we'll just go ahead and do it here for the demo.
            self.__testState = "PAUSE"  
        else:
            self.__testState = "REPEAT_CONT"
            self.textOutput.AppendText("Setup to repeat test continuously.\n")
        self.__setTestButtons()
        event.Skip()


    def eventRepeatSpeedScroll(self, event):# wxGlade: MainFrame.<event_handler>
        '''
        User is scrolling the speed of the repeating test.
        '''
        if self.sliderRepeatSpeed.GetValue() == 0:
            # Enable buttons that disrupt the continuous repeating of test
            self.__repeatSpeed = 0
            self.__testState = "PAUSE"
            self.__setTestButtons()
            self.textOutput.AppendText("Stopped continuous repeat.\n")
        else:
            speed = self.sliderRepeatSpeed.GetValue()
            self.__repeatSpeed = speed * speed
        
        self.labelSlider.SetLabel("%dms" % self.__repeatSpeed)
        self.textOutput.AppendText("Speed adjusted to %dms.\n" % \
                                   self.__repeatSpeed)
            
        event.Skip()
        
        
    def eventComboTest(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Combobox for tests was selected.
        '''
        print "Event handler `eventComboTest' not implemented"
        event.Skip()

    def __comboBoxTreeItemVisible(self, combo, idxFunc):
        '''
        Given the combo box and the index function, ensure the tree item
        is visible, provided it exists in the combo list.
        '''
        index = combo.GetSelection()
        
        class __FindTest(object):
            ''' Interface to find test by using selected index in combo box '''
            def __init__(self, index):
                ''' Init the FindTest object. '''
                self.__treeItem = None      # TreeItemId if found, else None
                self.__index = index        # Index of selected combo item 
                 
            def find(self, item, parameters):
                ''' Test if the item is selected in combo box '''
                treeData = parameters["tree"].GetPyData(item)
                idxFunc = parameters["idxFunc"] # Unbound method
                if self.__index == idxFunc(treeData):
                    self.__treeItem = item
                    
            def get(self):
                ''' Return the TreeItemId object. If not found, return None. '''
                return self.__treeItem
        
        root = self.treeTest.GetRootItem()
        findTest = __FindTest(index)
        self.__recursiveApply(root, findTest.find, { "tree" : self.treeTest,
                                                     "idxFunc" : idxFunc })
        treeItemID = findTest.get()
        if treeItemID is not None:
            self.treeTest.EnsureVisible(treeItemID)


    def __clearFlag(self, item, parameters):
        ''' Remove the flag by setting flag to false. '''
        data = self.treeTest.GetPyData(item)
        func = parameters["func"]
        func(data, False)
            

    def __clearComboEvent(self, msg, title, func, combo):
        ''' Reset the given combo box and clear all flags for given flag. '''
        msgDlg = wx.MessageDialog(self, msg, title, wx.YES_NO | wx.NO_DEFAULT)
        if msgDlg.ShowModal() == wx.ID_YES:
            self.__recursiveApply(self.treeTest.GetRootItem(),
                                  self.__clearFlag,
                                  { "func" : func })
            combo.Clear()
            combo.SetValue("None")
            self.textOutput.AppendText("All flags cleared.\n")
        else:
            self.textOutput.AppendText("No flags cleared..\n")

    
    def eventComboBreak(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Activate tree to the selected breakpoint row. Sends in the unbound
        method from TreeData to help with the recursive iteration through
        the GUI tree.
        '''
        if self.comboBreakPoints.GetSelection() + 1 == \
                                            self.comboBreakPoints.GetCount():
            self.__clearComboEvent("Are you sure you wish to remove all break "
                                   "points?.", "Clearing Break Points",
                                   TreeData.setBreakPoint,
                                   self.comboBreakPoints)
        else:
            self.__comboBoxTreeItemVisible(self.comboBreakPoints,
                                           TreeData.getComboBreakIdx)
        event.Skip()

    def eventComboSkipped(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Activate tree to the selected skipped row. Sends in the unbound
        method from TreeData to help with the recursive iteration through
        the GUI tree.
        '''
        if self.comboSkippedTests.GetSelection() + 1 == \
                                            self.comboSkippedTests.GetCount():
            self.__clearComboEvent("Are you sure you wish to remove all skips "
                                   "from the test?.", "Clearing Skipss",
                                   TreeData.setSkip,
                                   self.comboSkippedTests)
        else:
            self.__comboBoxTreeItemVisible(self.comboSkippedTests,
                                           TreeData.getComboSkipIdx)
        event.Skip()

    def eventTreeTestItemActivated(self, event):
        # wxGlade: MainFrame.<event_handler>
        '''
        Tree item was doubled clicked.
        '''
        self.textOutput.AppendText("Hiding the test tree panel.\n")
        self.__showCodeState = True
        self.__showCodePanel()
        self.GetSizer().Layout()
        selected = self.treeTest.GetSelections()[0]
        treeData = self.treeTest.GetPyData(selected)
        self.textOutput.AppendText("Showing code for %s\n" % treeData.getName())
        parametersCode = treeData.getParametersCode()
        self.textParametersCode.SetValue(parametersCode)
        moduleCode = treeData.getModuleCode()
        self.textModuleCode.SetValue(moduleCode)
        validatorCode = treeData.getValidatorCode()
        self.textValidatorCode.SetValue(validatorCode)
        limitsCode = treeData.getLimitsCode()
        self.textLimitsCode.SetValue(limitsCode)
        event.Skip()

    def __getTreeBranchSettings(self):
        '''
        Return two lists containing the IDs for all selected tree items that:
            1) Have a breakpoint set in one list
            2) Have a skip set in another list
        '''
        returnDict = { "break" : [], "skip" : [] }
        for item in self.treeTest.GetSelections():
            data = self.treeTest.GetPyData(item)
            if data.getBreakPoint() is True:
                returnDict["break"].append(item)
            if data.getSkip() is True:
                returnDict["skip"].append(item)
        return returnDict
    
        
    def __getTreeBranchText(self, item):
        '''
        Find names of descendants in a selected tree branch. 
        Return all text values in a list.
        Returns empty list if nothing is selected.
        Returns list in this fashion: [child, parent, grandparent, ... ]
        '''
        def recursiveAppend(self, textList, item):
            ''' Recursively append the tree item text to the list.'''
            textList.append(self.treeTest.GetItemText(item))
            if item != self.treeTest.GetRootItem():
                recursiveAppend(self, textList,
                                self.treeTest.GetItemParent(item))
            return textList
        
        textList = []
        return recursiveAppend(self, textList, item)
    
    
    def __treeBranchFormPath(self, item):
        '''
        Take the list generated from __getTreeBranchText() and form it
        into a string similar to a file path.
        '''
        s = ""
        textList = self.__getTreeBranchText(item)
        length = len(textList)
        for i in range(length):
            s += "/%s" % (textList[length - i - 1])
        return s

    
    def __appendComboList(self, item, parameters):
        ''' Append item's tree text to combo list supplied in parameters. '''
        data = self.treeTest.GetPyData(item) # TreeData object
        combo = parameters["combo"]
        idxFunc = parameters["idxFunc"]
        getFunc = parameters["getFunc"]
        if getFunc(data):
            idx = combo.Append(self.__treeBranchFormPath(item))
            idxFunc(data, idx)
        else:
            idxFunc(data, None)
        
         
    def __populateDropDownLists(self):
        '''
        Populate the drop down lists with currently active breakpoints and
        skipped tests.
        '''
        root = self.treeTest.GetRootItem()
        self.comboBreakPoints.Clear()
        self.comboSkippedTests.Clear()
        
        params = [{ "combo" : self.comboBreakPoints,
                    "idxFunc" : TreeData.setComboBreakIdx,  # Unbound method
                    "getFunc" : TreeData.getBreakPoint },   # Unbound method
                  { "combo" : self.comboSkippedTests,
                    "idxFunc" : TreeData.setComboSkipIdx,   # Unbound method
                    "getFunc" : TreeData.getSkip }]         # Unbound method
        for param in params:
            self.__recursiveApply(root, self.__appendComboList, param)
        if self.comboBreakPoints.GetCount() > 0:
            self.comboBreakPoints.Append("Remove All Break Points")
        if self.comboSkippedTests.GetCount() > 0:
            self.comboSkippedTests.Append("Run All Tests")


    def __setTreeTextColor(self, item):
        ''' Set the color of the text. '''
        if self.treeTest.GetPyData(item).getBreakPoint() is True:
            self.treeTest.SetItemTextColour(item, wx.Colour(255, 0, 0))
        elif self.treeTest.GetPyData(item).getSkip() is True:
            self.treeTest.SetItemTextColour(item,
                                          wx.Colour(192, 192, 192))
        else:
            self.treeTest.SetItemTextColour(item, wx.Colour(0, 0, 0))

    
    def __recursiveApply(self, item, function, parameters):
        ''' 
        Recursively applies the function to item using the parameters,
        followed by applying function to all the item's children, and so on.
        Parameters is a dictionary containing the name of the parameters
        and the values of the parameters.
        '''
        function(item, parameters)
        self.__setTreeTextColor(item)
        if self.treeTest.ItemHasChildren(item):
            child, cookie = self.treeTest.GetFirstChild(item)
            while (child.IsOk()):
                self.__recursiveApply(child, function, parameters)
                child, cookie = self.treeTest.GetNextChild(item, cookie)
               

    def eventTreeTestRightMouse(self, event):
        # wxGlade: MainFrame.<event_handler>
        '''
        Tree item was clicked with right mouse button.
        Build pop up menu according to the current settings of the object
        associated with the tree item. Then, change the settings of the object
        according to the user's choice (if any).
        '''
        class __PopUpManager(object):
            ''' Manage the popup menu for the tree '''
        
            def __init__(self, tree, treeWalker):
                ''' Initialize object '''
                self.__choice = None    # Used for debugging
                self.__tree = tree
                self.__treeWalker = treeWalker
                
            def __setSkip(self, item, parameters):
                ''' Recursively sets state of skip for all children items '''
                self.__tree.GetPyData(item).setSkip(parameters["state"])

            
            def __recursiveSetSkip(self, item, state):
                ''' Recursively sets state of skip for all children items '''
                self.__tree.GetPyData(item).setSkip(state)
                self.__setTextColor(item)
                if self.__tree.ItemHasChildren(item):
                    child, cookie = self.__tree.GetFirstChild(item)
                    while (child.IsOk()):
                        self.__recursiveSetSkip(child, state)
                        child, cookie = self.__tree.GetNextChild(item, cookie)
               

            def __setTextColor(self, item):
                ''' Set the color of the text. '''
                if self.__tree.GetPyData(item).getBreakPoint() is True:
                    self.__tree.SetItemTextColour(item, wx.Colour(255, 0, 0))
                elif self.__tree.GetPyData(item).getSkip() is True:
                    self.__tree.SetItemTextColour(item,
                                                  wx.Colour(192, 192, 192))
                else:
                    self.__tree.SetItemTextColour(item, wx.Colour(0, 0, 0))
                
            def OnPopupSelectSetBreakpoint(self, event):
                ''' Manage setting debug on line '''
                self.__choice = "Set Breakpoint"
                for item in self.__tree.GetSelections():
                    self.__tree.GetPyData(item).setBreakPoint(True)
                    self.__setTextColor(item)
                event.Skip()
            
            def OnPopupSelectResetBreakpoint(self, event):
                ''' Manage resetting Breakpoint on line '''
                self.__choice = "Reset Breakpoint"
                for item in self.__tree.GetSelections():
                    self.__tree.GetPyData(item).setBreakPoint(False)
                    self.__setTextColor(item)
                event.Skip()
            
            def OnPopupSelectSetSkip(self, event):
                ''' Manage setting skip line '''
                self.__choice = "Set Skip"
                for item in self.__tree.GetSelections():
                    self.__treeWalker(item, self.__setSkip, {"state" : True})
                event.Skip()
            
            def OnPopupSelectResetSkip(self, event):
                ''' Manage resetting skip line '''
                self.__choice = "Reset Skip"
                for item in self.__tree.GetSelections():
                    self.__treeWalker(item, self.__setSkip, {"state" : False})
                event.Skip()
                
            def getChoice(self):
                ''' Return the choice. '''
                return self.__choice
        
        def __buildMenu(menu, length, tag1, tag2, function1, function2):
            ''' Build the popup menu according to the current state of item. '''
            if length == 0:   # None set already
                item = menu.Append(-1, tag1)
                self.Bind(wx.EVT_MENU, function1, item)
            elif length == len(self.treeTest.GetSelections()):   # All set
                item = menu.Append(-1, tag2)
                self.Bind(wx.EVT_MENU, function2, item)
            else:   # Some are set, some aren't
                item = menu.Append(-1, tag1)
                self.Bind(wx.EVT_MENU, function1, item)
                item = menu.Append(-1, tag2)
                self.Bind(wx.EVT_MENU, function2, item)

        branchSettings = self.__getTreeBranchSettings()
        popUpMan = __PopUpManager(self.treeTest, self.__recursiveApply)
        menu = wx.Menu()

        __buildMenu(menu, len(branchSettings["break"]),
                    "Set Breakpoint", "Reset Breakpoint",
                    popUpMan.OnPopupSelectSetBreakpoint,
                    popUpMan.OnPopupSelectResetBreakpoint)        

        __buildMenu(menu, len(branchSettings["skip"]),
                    "Set Skip", "Reset Skip",
                    popUpMan.OnPopupSelectSetSkip,
                    popUpMan.OnPopupSelectResetSkip)        

        self.PopupMenu(menu)
        
        
        for item in self.treeTest.GetSelections():
#            print popUpMan.getChoice(), self.__getTreeBranchText(item) #Debug
            self.textOutput.AppendText("%s : %s\n" % (popUpMan.getChoice(),
                                            self.__treeBranchFormPath(item)))
        self.__populateDropDownLists()
        self.treeTest.UnselectAll() # Don't need anything selected now
        event.Skip()

    def eventHelp(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Bring up a help dialog. Let user choose which category to read:
        General information
        Querying the database (if activated)
        Running a test
        Troubleshooting while testing
        '''
        self.textOutput.AppendText("Display help documentation "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "Display help dialog "
                                        "happens in here. "
                                        "If the database is enabled, "
                                        "then enable the database help too.",
                                        "Help",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()
            
    def eventCodeEmailChanges(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        After debugging the test code remotely, the HBM engineer can email the
        changes along with other important information to their email address
        so that further work can be completed in the office.
        '''
        self.textOutput.AppendText("Email code changes "
                                   "happens now.\n")
        msgDlg = wx.MessageDialog(self, "Email dialog "
                                        "happens in here. "
                                        "The engineer can choose "
                                        "additional email addresses for CC.",
                                        "Help",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventCodeSaveLocal(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Save the code changes locally. This is meant ONLY for debugging
        by HBM engineering. This button should ONLY be visible if an HBM
        engineer logs into the test program.
        '''
        self.textOutput.AppendText("Saving code changes locally "
                                   "would be active now.\n")
        msgDlg = wx.MessageDialog(self, "Save dialog "
                                        "happens in here. ",
                                        "Help",
                                        wx.YES_NO | wx.NO_DEFAULT)
        msgDlg.ShowModal()
        msgDlg.Destroy()
        event.Skip()

    def eventCodeDone(self, event): # wxGlade: MainFrame.<event_handler>
        '''
        Hide this panel and unhide the test panel.
        '''
        self.textOutput.AppendText("Hiding the code view panel.\n")
        self.__showCodeState = False
        self.__showCodePanel()
        self.GetSizer().Layout()
        event.Skip()

    def eventParameterCodeChange(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `eventParameterCodeChange' not implemented"
        event.Skip()

    def eventModuleCodeChange(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `eventModuleCodeChange' not implemented"
        event.Skip()

    def eventValidatorCodeChange(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `eventValidatorCodeChange' not implemented"
        event.Skip()

    def eventLimitsCodeChange(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `eventLimitsCodeChange' not implemented"
        event.Skip()


    def __updateGUI(self, event):
        '''
        Receives data from thread and updates the textOutput (if text)
        '''
        t = event.data
        if isinstance(t, int):
            pass
        else:
            self.textOutput.AppendText(t)
        event.Skip()


    def __updateTimer(self, event):
        '''
        Update the GUI timer with the data in the event.
        '''
        self.labelTestTime.SetLabel("%s" % event.data)
        event.Skip()
        
        
    def __incrementProgress(self, event):
        '''
        Increment the progress bar.
        '''
        self.gaugeTest.SetValue(self.gaugeTest.GetValue() + 1)
        # This is lame. I cannot change the color of the progress bar.
        # But, after the test passes or fails, then I can change the
        # progess bar background to be either red or green...
#        color = wx.Color(255, 0, 0)
#        self.gaugeTest.SetBackgroundColour(color)
#        self.gaugeTest.GetClassDefaultAttributes().color = color
        event.Skip()
        
        
    def __updateClock(self, event):
        '''
        Update the GUI clock with current date and time..
        '''
        dateText = event.data["date"]
        timeText = event.data["time"]
        self.labelDate.SetLabel(dateText)
        self.labelTime.SetLabel(timeText)
        
        
    def __cleanExit(self, event):
        '''
        Confirm close, and clean up running threads.
        '''
        busyInfo = wx.BusyInfo("Cleaning up...\nPlease wait...")
        wx.Yield()
        # Send message to test thread and wait for it to get message
        if self.__bundle.isTestRunning():
            self.__bundle.setMessage("STOP", True)
        self.__clockThread.kill()
        self.__notifyThread.kill()
        if self.__timerThread is not None:
            self.__timerThread.setMessage("STOP")
        sleep(1)
        event.Skip()
        busyInfo.Destroy()
        return True
        

    def __databaseNotify(self, event):
        '''
        Change database notification icon according to state of data in event.
        '''
        if event.data:
            self.bitmapDataBase.SetBitmap(wx.Bitmap("%sdb_comit.xpm" % self.__R,
                                                    wx.BITMAP_TYPE_ANY))
        else:
            self.bitmapDataBase.SetBitmap(wx.Bitmap("%sdatabase.xpm" % self.__R,
                                                        wx.BITMAP_TYPE_ANY))
        event.Skip()
    
    
    def __networkNotify(self, event):
        '''
        Change network notification icon according to state of data in event.
        '''
        # event.data is either False or contains the IP address string 
        if event.data is not False:
            self.bitmapNetwork.SetBitmap(wx.Bitmap("%sconnect_established.xpm" \
                                                   % self.__R,
                                                    wx.BITMAP_TYPE_ANY))
            self.bitmapNetwork.SetToolTipString("Connected to network at %s" %\
                                                event.data)
        else:
            self.bitmapNetwork.SetBitmap(wx.Bitmap("%sconnect_no.xpm" % \
                                                   self.__R,
                                                    wx.BITMAP_TYPE_ANY))
        event.Skip()
        
        
    def __endStep(self, event):
        '''
        Change state of GUI because the step has completed.
        '''
        self.textOutput.AppendText("Pausing test suite.\n")
        self.__testState = "PAUSE"
        self.__setTestButtons()
        event.Skip()
        
        
# end of class MainFrame


